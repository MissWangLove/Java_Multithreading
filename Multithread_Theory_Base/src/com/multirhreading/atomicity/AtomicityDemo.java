package com.multirhreading.atomicity;

/**
 * 原子性问题带来的Bug
 * @author  王智
 * @date 2020年3月11日
 */
public class AtomicityDemo {
    /**
     * 线程切换带来的原子性问题, 高级语言的一条语句可能是有多个CPU指令来完成, 而线程切换可能发生在任何一个CPU指令之后,
     * 线程切换的目的是提高性能, 但是提高性能的同时会带来一定的问题, 这就是隐藏的问题.
     * 举个例子:
     *      count += 1;
     *  至少需要三个CPU指令:
     *      变量count从内存加载到寄存器中
     *      在寄存器中进行加一的操作
     *      写入内存
     *  如果在从内存加载到寄存其中的时候发生了线程切换, 那两个线程执行后的结果就是count = 1, 而不是期望的count = 2
     */
}
